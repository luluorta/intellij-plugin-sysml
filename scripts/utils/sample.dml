#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

#
# Sampling of a data set into number of samples specified as percentages in column vector
#
# Parameters:
#    X       : (input)  input data set: filename of input data set
#    sv      : (input)  sampling vector: filename of 1-column vector w/ percentages. sum(sv) must be 1.
#                         e.g. sv = (0.2)   for a 20% sample
#                         e.g. sv = (0.25, 0.25, 0.25, 0.25, 0.25) for 5 25% samples
#                         e.g. sv = (0.5, 0.3, 0.2) for a 50%, 30%, and 20% sample
#    O       : (output) folder name w/ samples generated
#    ofmt    : (output, default "binary") format of O: "csv", "binary" 
#
# Example:
#   hadoop jar SystemML.jar -f algorithms/utils/sample.dml -nvargs X="/tmp/X.mtx" sv="/tmp/sv.mtx" O=/tmp/Out ofmt=csv

# set defaults
ofmt = ifdef($ofmt, "binary")

                                        # Read inputs
X = read ($X);         # X dataset
sv = read ($sv);       # sv sample.dml vector

# Construct sampling lower/upper bounds for samples using prefix sum
R = rand(rows=nrow(X), cols=1, min=0.0, max=1.0, pdf = "uniform");
svLowBnd = cumsum(sv) - sv;
svUpBnd = cumsum(sv);

# Construct sampling matrix SM, and apply to create samples
parfor ( i in 1:nrow(sv))
{
  T1 = ppred(R, as.scalar(svUpBnd[i,1]), "<=");
  T2 = ppred(R, as.scalar(svLowBnd[i,1]), ">");
  SM = T1 * T2; 
  P = removeEmpty(target=diag(SM), margin="rows");
  iX = P %*% X;
  write (iX, $O + "/" + i, format=ofmt);
}
